{"version":3,"sources":["Component/Cards/Cards.jsx","Component/SearchBox/SearchBox.jsx","Component/Cardlist/Cardlist.js","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","monster","name","src","email","SearchBox","type","placeholder","onChange","changeHandler","state","user","searchUser","fetch","then","Response","json","data","setState","this","filterSearch","filter","toLowerCase","includes","e","currentTarget","value","map","Cards","Component","App","Cardlist","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2TAWeA,EARH,SAACC,GAAD,OACZ,sBAAKC,UAAU,OAAf,UACA,qBAAKA,UAAU,aAAaC,IAAKF,EAAMG,QAAQC,KAAMC,IAAG,+BAA0BL,EAAMG,QAAQC,KAAxC,eACxD,6BAAKJ,EAAMG,QAAQC,OACnB,4BAAIJ,EAAMG,QAAQG,YCMHC,G,MATE,SAACP,GACd,OACI,8BACI,uBAAOC,UAAU,SAASO,KAAK,SAASC,YAAY,iBAAiBC,SAAUV,EAAMW,oBCwClFZ,E,kDAxCX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAEDY,MAAQ,CACRC,KAAK,GACLC,WAAW,IALD,E,qDAUnB,WAAoB,IAAD,OACfC,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAEA,EAASC,UAAQF,MAAK,SAAAG,GAAO,EAAKC,SAAS,CAACP,KAAKM,S,oBAIrE,WAAU,IAAD,SACqBE,KAAKT,MAAxBC,EADF,EACEA,KAAKC,EADP,EACOA,WACNQ,EAAeT,EAAKU,QAAO,SAAAV,GAAI,OAAEA,EAAKT,KAAKoB,cAAcC,SAASX,EAAWU,kBAGnF,OACI,gCAEE,cAAC,EAAD,CAAWb,cAAe,SAACe,GAAD,OAAK,EAAKN,SAAS,CAACN,WAAWY,EAAEC,cAAcC,WAE3E,qBAAK3B,UAAU,YAAf,SAEKqB,EAAaO,KAAI,SAAAhB,GAAI,OAClB,cAACiB,EAAD,CAAwB3B,QAASU,GAApBA,EAAKT,kB,GA/BnB2B,aCgBJC,MAVf,WAEE,OACE,sBAAK/B,UAAU,MAAf,UACE,+CACD,cAACgC,EAAD,QCJUC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBpB,MAAK,YAAkD,IAA/CqB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.4274e102.chunk.js","sourcesContent":["import React from \"react\";\r\nimport './Card.css'\r\n\r\nconst Card =(props)=>(\r\n<div className=\"Card\">\r\n<img className=\"monsterImg\" alt={props.monster.name} src={`https://robohash.org/${props.monster.name}?set=set2`}/>\r\n<h2>{props.monster.name}</h2>\r\n<p>{props.monster.email}</p>\r\n</div>)\r\n\r\n\r\nexport default Card","\r\nimport React from 'react'\r\nimport './SearchStyle.css'\r\n\r\nconst SearchBox =(props)=> {\r\n    return (\r\n        <div>\r\n            <input className=\"search\" type=\"search\" placeholder=\"Search Monster\" onChange={props.changeHandler}/>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default SearchBox","import React, { Component } from 'react'\r\nimport './Card-list.css'\r\nimport Cards from '../Cards/Cards'\r\nimport SearchBox from '../SearchBox/SearchBox'\r\n\r\nclass Card extends Component {\r\n    \r\n    constructor(props) {\r\n        super(props)\r\n    \r\n        this.state = {\r\n             user:[],\r\n             searchUser:''\r\n\r\n        }\r\n    }\r\n\r\n    componentDidMount(){\r\n        fetch('https://jsonplaceholder.typicode.com/users')\r\n        .then(Response=>Response.json()).then(data=>{this.setState({user:data})})\r\n\r\n    }\r\n\r\n    render() {\r\n        const {user,searchUser} = this.state;\r\n        const filterSearch = user.filter(user=>user.name.toLowerCase().includes(searchUser.toLowerCase()))\r\n\r\n\r\n        return (\r\n            <div>\r\n              \r\n              <SearchBox changeHandler={(e)=>this.setState({searchUser:e.currentTarget.value})}/>\r\n\r\n            <div className=\"Card-list\">\r\n                \r\n                {filterSearch.map(user=>(\r\n                    <Cards  key={user.name} monster={user}/>\r\n                ))}\r\n\r\n                \r\n            </div>\r\n                   \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Card\r\n","import './App.css';\nimport React from 'react'\nimport Cardlist from './Component/Cardlist/Cardlist';\n\n\n\n\n\n\n\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n      <h1>Monster House</h1>\n     <Cardlist/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}